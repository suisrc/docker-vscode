#!/usr/bin/env bash
set -e

if [[ $GIT_USER_NAME ]]; then
    git config --global user.name "$GIT_USER_NAME"
fi
if [[ $GIT_USER_EMAIL ]]; then
    git config --global user.email "$GIT_USER_EMAIL"
fi

#if [ $GIT_INIT = "true" ] && [ ! -e ".gitignore" ]; then
#    if [[ $GIT_REPO_URLS ]]; then
#        IFS=';'
#        read -ra gits <<<"$GIT_REPO_URLS"
#        for i in "${gits[@]}"; do  
#            IFS='|'
#            read -a strarr <<<"$i"
#            gitUrl=${strarr[0]}
#            gitBranch=${strarr[1]}
#            gitDir=${strarr[2]}
#            if [ -z "${gitBranch}" ]; then
#                echo "git clone ${gitUrl} ${gitDir}"
#                git clone ${gitUrl} ${gitDir}
#            else
#                echo "git clone -b ${gitBranch} ${gitUrl} ${gitDir}"
#                git clone -b ${gitBranch} ${gitUrl} ${gitDir}
#            fi
#        done
#    fi
#    if [ ! -e ".gitignore" ]; then
#        echo "" >> .gitignore
#    fi
#fi

#exec $@

# https://github.com/gitpod-io/openvscode-server
# /bin/sh -c "exec code-server --host 0.0.0.0 --port 7000"
# $# 是传给脚本的参数个数
# $0 是脚本本身的名字
# $1 是传递给该shell脚本的第一个参数
# $2 是传递给该shell脚本的第二个参数
# $@ 是传给脚本的所有参数的列表
# $* 是以一个单字符串显示所有向脚本传递的参数，与位置变量不同，参数可超过9个
# $$ 是脚本运行的当前进程ID号
# $? 是显示最后命令的退出状态，0表示没有错误，其他表示有错误
# ${var:-string}和${var:=string}:若变量var为空，则用在命令行中用string来替换${var:-string}，否则变量var不为空时，则用变量var的值来替换${var:-string}；
#    对于${var:=string}的替换规则和${var:-string}是一样的，所不同之处是${var:=string}若var为空时，用string替换${var:=string}的同时，
#    把string赋给变量var:${var:=string}很常用的一种用法是，判断某个变量是否赋值，没有的话则给它赋上一个默认值。
# ${var:+string}的替换规则和上面的相反，即只有当var不是空的时候才替换成string，若var为空时则不替换或者说是替换成变量 var的值，即空值。(因为变量var此时为空，所以这两种说法是等价的)
# ${var:?string}替换规则为:若变量var不为空，则用变量var的值来替换${var:?string}；若变量var为空，则把string输出到标准错误中，并从脚本中退出。我们可利用此特性来检查是否设置了变量的值。