#!/bin/bash

## 全局代理， 使用 tun2socks 代理所有流量进行转发

clear() {
    echo "clear tun2socks"

    ip link set dev tun0 down
    ip tuntap del mode tun dev tun0
    ip route del default
    ip route add default via 10.88.0.1 dev eth0 metric 10

    echo "clear tun2socks done"
}

init() {
    echo "init tun2socks"

    # 创建 tun0 198.18.0.0/15 网络基准测试地址
    ip tuntap add mode tun dev tun0
    ip addr add 198.18.0.1/32 dev tun0
    ip link set dev tun0 up
    ip route del default
    ip route add default via 198.18.0.1 dev tun0 metric 1
    ip route add default via 10.88.0.1 dev eth0 metric 10

    # # 有时我们需要为对应的接口禁用，以便它可以接收来自其他接口的数据包。rp_filter
    # sysctl net.ipv4.conf.all.rp_filter=0
    # sysctl net.ipv4.conf.eth0.rp_filter=0

    echo "init tun2socks done"
}

run() {
    echo "start tun2socks"
    tun2socks --interface eth0 --device tun0 --proxy "xxx"
}

run2() {
    # 判断是否存在 tun0， 不存在则初始化
    if ip link show tun0 > /dev/null 2>&1; then
        echo "Network device tun0 exists."
    else
        echo "Network device tun0 does not exist."
        init # 初始化
    fi
    run # 启动
}

case $1 in
    clear)
        clear
        ;;
    init)
        init
        ;;
    run)
        run
        ;;
    help)
        echo "Usage: $0 {clear|init|run}"
        exit 1
        ;;
    *)
        run2
        ;;

esac
